1.1 핵심 개념 이해하기
  [노드의 정의]
  Node.js는 Chrome V8 Javascrpit 엔진으로 빌드된 Javascript 런타임입니다.
  
  1.1.1 서버
  서버?
    네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 혹은 프로그램
    
    (ex) 컴퓨터 ----------------------->  브라우저 -------------------------> 서버 컴퓨터
                웹사이트 주소 입력(요청)               웹사이트 위치 파악
                
                 사이트 페이지 띄워줌(응답)            사이트 페이지 보내줌
         컴퓨터 <-----------------------  브라우저 <------------------------- 서버 컴퓨터
   
   노드는 자바스크립트 프로그램이 서버로서 기능하기 위한 도구를 제공하므로 서버역할을 수행가능.
   
   1.1.2 런타임
   런타임?
     특정 언어로 만든 프로그램들을 실행할 수 있는 환경
   
   [노드의 정의]
   Node.js는 (Chrome V8 Javascrpit 엔진으로 빌드된) Javascript 런타임입니다.
    -> 노드는 자바스크립트 실행기
   
   노드는 V8과 libuv라는 라이브러리 사용.
    -> 이벤트 기반, 논 블로킹 I/O 구현
   
   1.1.3 이벤트 기반
   이벤트 기반?
    이벤트가 발생했을 때 미리 지정해둔 작업 수행하는 방식 ex) 클릭, 네트워크 요청
    
    (1) 이벤트 리스너에 콜백 함수 미리 등록
    (2) 이벤트 발생
    (3) 등록되어 있던 콜백 함수 호출
    
    (ex) 이벤트 루프 예시
    
    function first() {
      second();
      console.log('첫 번째');
    }
    function second() {
      third();
      console.log('두 번째');
    }
    function third() {
      console.log('첫 번째');
    }
    first();
    
    호출순서: 1 - 2 - 3
    실행순서: 3 - 2 - 1
    
  이벤트루프: 호출한 콜백 함수들을 관리, 호출된 콜백 함수의 실행 순서 결정
  백그라운드: setTimeout같은 타이ㅓ나 이벤트 리스너들이 대기하는 곳.  
  태스크 큐: 이벤트 발생 후, 백그라운드에서 태스크 큐로 타이머나 이벤트 리스너의 콜백 함수를 보냄. 이ㅣㄹ반적으로 콜백들이 줄을 서 있음.
  
  
 1.1.4 논 블로킹 I/O
 논 블로킹?
  이전 작업이 끝나지 않아도 다음 작업을 수행함
 블로킹?
  이전 작업이 끝나야 다음 작업을 수행
 
 -> 논 블로킹 방식이 시간 효율 좋음. but 복잡한 작업 어려움.
 
 (ex) 블로킹 방식 코드와 논블로킹 방식 코드
 
 (ex1)
 function longRunningTask() {
  console.log('작업 끝');
 }
 
 console.log('시작');
 longRunningTask();
 console.log('다음작업')
 
 (ex2)
 function longRunningTask() {
  console.log('작업 끝')
 }
 console.log('시작');
 setTimeout(longRunningTask, 0)
 console.log('다음작업');
 
 *ps) setTimeout(콜백, 0) 은 코드를 논 블로킹코드로 만들기 위해 사용하는 기법 중 하나.
 
 
    
